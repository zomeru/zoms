import { GoogleGenAI } from '@google/genai';

import { MAX_SUMMARY_LENGTH, MAX_TITLE_LENGTH } from '@/constants';

import { getErrorMessage } from './errorMessages';
import { selectCombinationOfTopics, tryParseAIJSON } from './generateBlogHelpers';
import log from './logger';

export interface GeneratedBlogPost {
  title: string;
  summary: string;
  body: string; // This is the final markdown output generated by AI, not raw user input
  tags: string[];
  readTime: number;
}

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

/**
 * Generate blog post content using Gemini AI
 */
export async function generateBlogContent(): Promise<GeneratedBlogPost> {
  const topics = selectCombinationOfTopics();
  const topicsList = topics.map((t) => t).join(', ');
  const year = new Date().getFullYear();

  // Log selected topics
  log.info('Selected topics for blog generation', { topics: topicsList });

  const prompt = `
Write a comprehensive, technically detailed blog post that demonstrates how the following web development topics can be integrated within a single application context:
${topicsList}

All examples, explanations, and code snippets must use TypeScript as the primary language.

The article must be written for intermediate to advanced web developers, offering practical examples, best practices, and actionable insights. Ensure content is current as of ${year}.

Writing Guidelines:
1. Include relevant code snippets and technical explanations.
2. Word count: 550–750 words (optimized for faster generation).
3. Structure clearly using Markdown headings (## for major sections).
4. Use valid Markdown formatting: headers (#, ##, ###), bullet points, **bold**, \`inline code\`, and fenced code blocks.
5. Explain why each tool, library, or framework is used, how it fits into the architecture, and include hyperlinks to official documentation. (2 sentences max per explanation)
6. Keep explanations brief (1–2 sentences per section) and focus on practical code examples.

CRITICAL OUTPUT FORMAT:
Respond with ONLY valid JSON in this exact structure:
{
  "title": "Compelling and concise blog title (40–80 characters total, including spaces — REQUIRED)",
  "summary": "SEO-friendly summary (100–150 characters total, including spaces — REQUIRED; no backticks or quotes)",
  "body": "Full blog post content in Markdown format. Escape all internal double quotes with a backslash (\\").",
  "tags": ["tag1", "tag2", "tag3"],
  "readTime": 5
}

JSON VALIDATION RULES:
- Use double quotes for all strings
- No backticks (\`) in the summary — use single quotes instead for code references
- Escape any double quotes inside strings
- No trailing commas or comments
- The body field must contain valid Markdown
- Include 2–5 relevant tags (lowercase, no special characters)
- Calculate readTime as total words ÷ 200 (rounded up)

Final Quality Requirements:
- Writing should be well-structured, clear, and valuable to professionals
- Include concise code examples where relevant
- Provide meaningful insights developers can apply immediately
`;

  const result = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: prompt,
    config: {
      systemInstruction:
        'You are an experienced full-stack engineer and expert technical writer who produces clear, concise, and engaging content for professional web developers.',
      temperature: 0.6
    }
  });

  if (!result.text) {
    throw new Error(getErrorMessage('AI_GENERATION_FAILED'));
  }

  const text = result.text;

  try {
    // Parse the JSON response
    const parsed = tryParseAIJSON(text);

    // Validate required fields
    if (!parsed.title || !parsed.summary || !parsed.body) {
      throw new Error(getErrorMessage('MISSING_REQUIRED_FIELDS'));
    }

    return {
      title: parsed.title.slice(0, MAX_TITLE_LENGTH), // Ensure title length limit
      summary: parsed.summary.slice(0, MAX_SUMMARY_LENGTH), // Ensure summary length limit
      body: parsed.body, // Store raw markdown
      tags: Array.isArray(parsed.tags) ? parsed.tags.slice(0, 5) : [],
      readTime: parsed.readTime ?? 5 // Default to 5 minutes if not provided
    };
  } catch (error) {
    throw new Error(getErrorMessage('AI_GENERATION_FAILED'), { cause: error });
  }
}
